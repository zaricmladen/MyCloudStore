//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyCloudStoreClient.StoreServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StoreServiceReference.IStoreService")]
    public interface IStoreService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DoWork", ReplyAction="http://tempuri.org/IStoreService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/DoWork", ReplyAction="http://tempuri.org/IStoreService/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/authenthicateUser", ReplyAction="http://tempuri.org/IStoreService/authenthicateUserResponse")]
        bool authenthicateUser(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/authenthicateUser", ReplyAction="http://tempuri.org/IStoreService/authenthicateUserResponse")]
        System.Threading.Tasks.Task<bool> authenthicateUserAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/storeFile", ReplyAction="http://tempuri.org/IStoreService/storeFileResponse")]
        bool storeFile(string fileName, string hashValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/storeFile", ReplyAction="http://tempuri.org/IStoreService/storeFileResponse")]
        System.Threading.Tasks.Task<bool> storeFileAsync(string fileName, string hashValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/getChunks", ReplyAction="http://tempuri.org/IStoreService/getChunksResponse")]
        void getChunks(string hashValue, byte[] chunk, int nr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/getChunks", ReplyAction="http://tempuri.org/IStoreService/getChunksResponse")]
        System.Threading.Tasks.Task getChunksAsync(string hashValue, byte[] chunk, int nr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/downloadFile", ReplyAction="http://tempuri.org/IStoreService/downloadFileResponse")]
        void downloadFile(string fileName, string hashValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/downloadFile", ReplyAction="http://tempuri.org/IStoreService/downloadFileResponse")]
        System.Threading.Tasks.Task downloadFileAsync(string fileName, string hashValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/downloadFileChunk", ReplyAction="http://tempuri.org/IStoreService/downloadFileChunkResponse")]
        byte[] downloadFileChunk(string hashValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/downloadFileChunk", ReplyAction="http://tempuri.org/IStoreService/downloadFileChunkResponse")]
        System.Threading.Tasks.Task<byte[]> downloadFileChunkAsync(string hashValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/filesNames", ReplyAction="http://tempuri.org/IStoreService/filesNamesResponse")]
        string[] filesNames(string hashValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/filesNames", ReplyAction="http://tempuri.org/IStoreService/filesNamesResponse")]
        System.Threading.Tasks.Task<string[]> filesNamesAsync(string hashValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/checkAvailableSpace", ReplyAction="http://tempuri.org/IStoreService/checkAvailableSpaceResponse")]
        double[] checkAvailableSpace(string userName, double size);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/checkAvailableSpace", ReplyAction="http://tempuri.org/IStoreService/checkAvailableSpaceResponse")]
        System.Threading.Tasks.Task<double[]> checkAvailableSpaceAsync(string userName, double size);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/incUsedSpace", ReplyAction="http://tempuri.org/IStoreService/incUsedSpaceResponse")]
        void incUsedSpace(string userName, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/incUsedSpace", ReplyAction="http://tempuri.org/IStoreService/incUsedSpaceResponse")]
        System.Threading.Tasks.Task incUsedSpaceAsync(string userName, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/decUsedSpace", ReplyAction="http://tempuri.org/IStoreService/decUsedSpaceResponse")]
        void decUsedSpace(string userName, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/decUsedSpace", ReplyAction="http://tempuri.org/IStoreService/decUsedSpaceResponse")]
        System.Threading.Tasks.Task decUsedSpaceAsync(string userName, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/deleteFile", ReplyAction="http://tempuri.org/IStoreService/deleteFileResponse")]
        void deleteFile(string fileName, string hashValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/deleteFile", ReplyAction="http://tempuri.org/IStoreService/deleteFileResponse")]
        System.Threading.Tasks.Task deleteFileAsync(string fileName, string hashValue);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStoreServiceChannel : MyCloudStoreClient.StoreServiceReference.IStoreService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StoreServiceClient : System.ServiceModel.ClientBase<MyCloudStoreClient.StoreServiceReference.IStoreService>, MyCloudStoreClient.StoreServiceReference.IStoreService {
        
        public StoreServiceClient() {
        }
        
        public StoreServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StoreServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StoreServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StoreServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public bool authenthicateUser(string userName, string password) {
            return base.Channel.authenthicateUser(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> authenthicateUserAsync(string userName, string password) {
            return base.Channel.authenthicateUserAsync(userName, password);
        }
        
        public bool storeFile(string fileName, string hashValue) {
            return base.Channel.storeFile(fileName, hashValue);
        }
        
        public System.Threading.Tasks.Task<bool> storeFileAsync(string fileName, string hashValue) {
            return base.Channel.storeFileAsync(fileName, hashValue);
        }
        
        public void getChunks(string hashValue, byte[] chunk, int nr) {
            base.Channel.getChunks(hashValue, chunk, nr);
        }
        
        public System.Threading.Tasks.Task getChunksAsync(string hashValue, byte[] chunk, int nr) {
            return base.Channel.getChunksAsync(hashValue, chunk, nr);
        }
        
        public void downloadFile(string fileName, string hashValue) {
            base.Channel.downloadFile(fileName, hashValue);
        }
        
        public System.Threading.Tasks.Task downloadFileAsync(string fileName, string hashValue) {
            return base.Channel.downloadFileAsync(fileName, hashValue);
        }
        
        public byte[] downloadFileChunk(string hashValue) {
            return base.Channel.downloadFileChunk(hashValue);
        }
        
        public System.Threading.Tasks.Task<byte[]> downloadFileChunkAsync(string hashValue) {
            return base.Channel.downloadFileChunkAsync(hashValue);
        }
        
        public string[] filesNames(string hashValue) {
            return base.Channel.filesNames(hashValue);
        }
        
        public System.Threading.Tasks.Task<string[]> filesNamesAsync(string hashValue) {
            return base.Channel.filesNamesAsync(hashValue);
        }
        
        public double[] checkAvailableSpace(string userName, double size) {
            return base.Channel.checkAvailableSpace(userName, size);
        }
        
        public System.Threading.Tasks.Task<double[]> checkAvailableSpaceAsync(string userName, double size) {
            return base.Channel.checkAvailableSpaceAsync(userName, size);
        }
        
        public void incUsedSpace(string userName, double value) {
            base.Channel.incUsedSpace(userName, value);
        }
        
        public System.Threading.Tasks.Task incUsedSpaceAsync(string userName, double value) {
            return base.Channel.incUsedSpaceAsync(userName, value);
        }
        
        public void decUsedSpace(string userName, double value) {
            base.Channel.decUsedSpace(userName, value);
        }
        
        public System.Threading.Tasks.Task decUsedSpaceAsync(string userName, double value) {
            return base.Channel.decUsedSpaceAsync(userName, value);
        }
        
        public void deleteFile(string fileName, string hashValue) {
            base.Channel.deleteFile(fileName, hashValue);
        }
        
        public System.Threading.Tasks.Task deleteFileAsync(string fileName, string hashValue) {
            return base.Channel.deleteFileAsync(fileName, hashValue);
        }
    }
}
